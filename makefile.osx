# had to strip everything out because osx is not quite sane about static linking

# Name of text file containing build number.
RELEASE=1
BUILD_NUMBER_FILE=build-number.txt
BUILD_NUMBER_DEFS  = -D__BUILD_DATE=$$(date +'%Y%m%d')
BUILD_NUMBER_DEFS += -D__BUILD_NUMBER=$$(cat $(BUILD_NUMBER_FILE))

# :=0 --> UPnP support turned off by default at runtime
# :=1 --> UPnP support turned on by default at runtime
# :=- --> No UPnP support - miniupnp not required
USE_UPNP:=-

# :=1 --> Enable IPv6 support
# :=0 --> Disable IPv6 support
USE_IPV6:=1

LINK:=$(CXX)

MACPORTS_LIB_PATH=/opt/local/lib
MACPORTS_INCLUDE_PATH=/opt/local/include
BOOST_LIB_SUFFIX=

BOOST_LIB_PATH=/usr/local/lib
BOOST_INCLUDE_PATH=/usr/local/include

DEFS=-DBOOST_SPIRIT_THREADSAFE -D_FILE_OFFSET_BITS=64 $(BUILD_NUMBER_DEFS)

DEFS += $(addprefix -I,$(CURDIR) $(CURDIR)/obj $(BOOST_INCLUDE_PATH) $(BDB_INCLUDE_PATH) $(OPENSSL_INCLUDE_PATH) $(MACPORTS_INCLUDE_PATH))
LIBS = $(addprefix -L,$(BOOST_LIB_PATH) $(BDB_LIB_PATH) $(OPENSSL_LIB_PATH) $(MACPORTS_LIB_PATH))

TESTDEFS = -DTEST_DATA_DIR=$(abspath test/data)

LIBS += \
   $(BOOST_LIB_PATH)/libboost_system$(BOOST_LIB_SUFFIX).a \
   $(BOOST_LIB_PATH)/libboost_filesystem$(BOOST_LIB_SUFFIX).a \
   $(BOOST_LIB_PATH)/libboost_program_options$(BOOST_LIB_SUFFIX).a \
   $(BOOST_LIB_PATH)/libboost_thread$(BOOST_LIB_SUFFIX).a \
   $(BOOST_LIB_PATH)/libboost_chrono$(BOOST_LIB_SUFFIX).a \
   $(BOOST_LIB_PATH)/libboost_timer$(BOOST_LIB_SUFFIX).a \
   $(MACPORTS_LIB_PATH)/libssl.a \
   $(MACPORTS_LIB_PATH)/libcrypto.a \
   -l gmp \
   $(MACPORTS_LIB_PATH)/libz.a \
   -l dl


#DEBUGFLAGS=-g

# CXXFLAGS can be specified on the make command line, so we use xCXXFLAGS that only
# adds some defaults in front. Unfortunately, CXXFLAGS=... $(CXXFLAGS) does not work.
xCXXFLAGS=-flto -O2 -fomit-frame-pointer -Wall -Wextra -Wformat -Wformat-security -Wno-reserved-user-defined-literal -Wno-unused-parameter -std=c++11 -stdlib=libc++  \
    $(DEBUGFLAGS) $(DEFS) $(HARDENING) $(CXXFLAGS)

# LDFLAGS can be specified on the make command line, so we use xLDFLAGS that only
# adds some defaults in front. Unfortunately, LDFLAGS=... $(LDFLAGS) does not work.
xLDFLAGS=$(LDHARDENING) $(LDFLAGS)

OBJS= \
    obj/globals.o \
    obj/main.o \
    obj/util.o \
    obj/miner.o \
    obj/prime.o \
    obj/workmanager.o \
    obj/tcpconnection.o \
    obj/licenses.o

all: rapidprime

$(BUILD_NUMBER_FILE): $(OBJS)
	@if ! test -f $(BUILD_NUMBER_FILE); then echo 0 > $(BUILD_NUMBER_FILE); fi
	@echo $$(($$(cat $(BUILD_NUMBER_FILE)) + 1)) > $(BUILD_NUMBER_FILE)

test check: test_primecoin FORCE
	./test_primecoin

# auto-generated dependencies:
-include obj/*.P
-include obj-test/*.P

obj/build.h: FORCE
	/bin/sh ../share/genbuild.sh obj/build.h
version.cpp: obj/build.h
DEFS += -DHAVE_BUILD_INFO

obj/%.o: %.cpp
	$(CXX) -c $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

obj/%.o: %.asm
	yasm -f macho64 -o $@ $<

rapidprime: $(BUILD_NUMBER_FILE) $(OBJS:obj/%=obj/%)
	$(LINK) $(xCXXFLAGS) $(BUILD_NUMBER_LDFLAGS)  -o $@ $(OBJS) $(xLDFLAGS) $(LIBS)
	install_name_tool -change /opt/local/lib/libgmp.10.dylib @executable_path/libgmp.10.dylib $@
	strip $@
	otool -L $@

TESTOBJS := $(patsubst test/%.cpp,obj-test/%.o,$(wildcard test/*.cpp))

obj-test/%.o: test/%.cpp
	$(CXX) -c $(TESTDEFS) $(xCXXFLAGS) -MMD -MF $(@:%.o=%.d) -o $@ $<
	@cp $(@:%.o=%.d) $(@:%.o=%.P); \
	  sed -e 's/#.*//' -e 's/^[^:]*: *//' -e 's/ *\\$$//' \
	      -e '/^$$/ d' -e 's/$$/ :/' < $(@:%.o=%.d) >> $(@:%.o=%.P); \
	  rm -f $(@:%.o=%.d)

test_primecoin: $(TESTOBJS) $(filter-out obj/init.o,$(OBJS:obj/%=obj/%))
	$(LINK) $(xCXXFLAGS) -o $@ $(LIBPATHS) $^ $(TESTLIBS) $(xLDFLAGS) $(LIBS)

clean:
	-rm -f rapidprime test_primecoin
	-rm -f obj/*.o
	-rm -f obj-test/*.o
	-rm -f obj/*.P
	-rm -f obj-test/*.P
	-rm -f obj/build.h
	-cd leveldb && $(MAKE) clean || true

FORCE:
